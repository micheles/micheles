Enterprise programming means working with legacy code
===========================================================

In a recent thread on Artima people argued about the productivity 
differences between working on a startup company and working in an
old-fashioned enterprise company. Some people ascribe the improved
productivity we see in startups to the methodology which is typically
in such enviroments, in particular the reliance on Agile methods; on
the other side some people question such analysis.

I am also skeptical: it looks plain obvious to me that the reason why
startups are so productive is not (much) the methodology they use, is the
fact that they work mostly with new code whereas traditional
enterprises mostly work with old code. That made most of the
difference. Of course, the methology has its relevance, but I would
say that it is not the most important parameter. My claim is that
working with legacy code in an enterprise context is inherently more
difficult than working with new code in a startup context, and that is
independent from the methodology: even if the best of the possible
cases, when you have a code base in good shape, in any case a company
will have millions of lines of code written by developers which are no
more there, answering requeriments that nobody remembers, 
whereas a startup (being born only recently, by
definition) will have much less code and it will very likely be code
written by the developers working there for customers which are still
actively using the software.

It should not be necessary to state the obvious, but perhaps there a few things
which are not obvious to people that never worked in an enterprise context.
Here by "enterprise" I will mean any company which has a (possibly long) 
history and a significant number of developers. The company were I work
is only 10 years old the total number of developers who work or worked there
is only 15: still, we have a lot of the troubles of enterprise programming
and I can imagine what is going on in larger and older companies.

In can split my programming career in three phases:

 - solo scripter
 - startup developer
 - enterprise developer

In the first phase I was just programming for personal projects, for
the learning experience and to simplify my daily life with helper
scripts.  I was the only developer for such projects, I did not use a
Version Control System and everything went smoothly and fine. Old code
was just thrown out, libraries were written with time and ease, I had
no time constraint and no problems at all. My productivity rocket.  In
the second phase I worked at a startup. All my code was new code, i.e.
I had not to read other people code, except for what concerns the
framework we used. And then the trouble lied, since the framework
(Zope) was large and complex. I learned the whole Python and its
standard library in a few months: but learning Zope and Plone would
require a few years. This is the first difficulty of working in an
enterprise world, having to learn enterprise-oriented frameworks with
all their problems. Still, this is not yet working in an
enterprise. When I started working as an enterprise developer, on top
of studying third party software, I had to study our internal
software, which is much bigger and much less documented and well
structured. The reason is that frameworks released in the open are
intended for third party consumption and are somewhat polished
(sometimes this is not really true, but let it pass), whereas code
written for internal usage is typically dirty. And there all the
difficulty of working in an enterprise enters in the game. (of course, there are
also other difficulties related to company policies and politics,
which may be much more serious than coding-related issues but here I
will focus only on the programming-related aspects).

Let me be concrete: I have been spending the latest two months in a
large refactoring project (which is only at the beginning, anyway) so
I can be very much specific about the difficulties that every enterprise
developer is facing every day.





.. http://www.michaelfeathers.com/	
.. Working Effectively with Legacy Code 
   
..  persone a StatPro
   
   1 Adolfo
   2 Ametrano
   3 Gigi
   4 Marco
   5 Mario
   6 Enrico
   7 Michele
   8 Nicola
   9 Lawrence
   10 Antonio
   11 Matteo
   12 Alberto
   13 Silvia
   14 Andrea
   15 Paolo
